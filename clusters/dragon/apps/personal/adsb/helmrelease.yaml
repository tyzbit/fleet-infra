# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.1/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app adsb
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *app
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: "4.4.0"
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllercommon: &controllercommon
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
        fr24-radar-id: ${fr24_radar_id}
      replicas: 1 # active longhorn-webapp

    controllers:
      ultrafeeder:
        <<: *controllercommon
        replicas: 0
        containers:
          ultrafeeder:
            securityContext: {privileged: true}
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-adsb-ultrafeeder
              tag: latest
              # tag: telegraf # for use with InfluxDB/Prometheus and Grafana
              pullPolicy: IfNotPresent
            command:
              - bash
              - -c
              - |
                set -eo pipefail
                files=("osm_tiles_0_9.tar.gz" "osm_tiles_10.tar.gz")
                IPATH=/usr/local/share/osm_tiles_offline
                mkdir -p "$IPATH"
                cd "$IPATH"

                for file in "$${files[@]}"; do
                  echo "downloading $file if needed"
                  curl -L --no-progress-meter \
                    --etag-save "$file.etag" \
                    --etag-compare "$file.etag" \
                    "https://github.com/wiedehopf/adsb-scripts/releases/download/osm2022/$file" \
                    -o "$file" || echo "couldn't check for new maps, check internet"
                  if [ -f $file ]; then
                    echo "updating maps from $file"
                    tar -x -f "$file"
                    # With the etag saved, we don't need the original archive
                    echo "cleaning up $file"
                    rm -f $file
                  fi
                done
                echo "updated offline maps"
                /tar1090-install.sh || true # we just need it to set up maps
                /init
            env:
              # https://github.com/sdr-enthusiasts/docker-adsb-ultrafeeder?tab=readme-ov-file#basic-ultrafeeder-parameters
              LOGLEVEL: verbose
              TZ: US/New_York
              # UUID: "568"
              READSB_DEVICE_TYPE: rtlsdr
              ENABLE_978: "yes"
              # URL_978: http://dump978/skyaware978
              # READSB_RTLSDR_DEVICE: 00000001 # Serial number of device
              READSB_RTLSDR_DEVICE: stx:1090:0
              # readsb/decoder parameters: (these are in the secret)
              READSB_ALT: 3m
              READSB_RX_LOCATION_ACCURACY: 2 
              READSB_STATS_RANGE: "true"
              READSB_NET_BEAST_OUTPUT_PORT: "30005"
              READSB_JSON_TRACE_INTERVAL: "5"
              READSB_HEATMAP_INTERVAL: "5" # configs replay too, should be in lock-step with trace interval
              # TAR1090 (Map Web Page) parameters:
              UPDATE_TAR1090: "true"
              TAR1090_MESSAGERATEINTITLE: "true"
              TAR1090_PLANECOUNTINTITLE: "true"
              TAR1090_ENABLE_AC_DB: "true"
              TAR1090_FLIGHTAWARELINKS: "true"
              TAR1090_USEROUTEAPI: "true"
              # GRAPHS1090 (Decoder and System Status Web Page) parameters:
              GRAPHS1090_DISABLE: "true"
              GRAPHS1090_DARKMODE: "true"
            # probes:
            #   liveness: &probe_enabled
            #     enabled: true
            #     port: 80
            #   readiness: *probe_enabled
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 512Mi

      # flightradar24:
      #   <<: *controllercommon
      #   replicas: 0
      #   containers:
      #     # https://github.com/sdr-enthusiasts/docker-flightradar24?tab=readme-ov-file#obtaining-a-flightradar24-sharing-key-for-adsb
      #     flightradar24:
      #       image:
      #         repository: ghcr.io/sdr-enthusiasts/docker-flightradar24
      #         tag: latest
      #       env:
      #         BEASTHOST: adsb-ultrafeeder
      #         FR24KEY: ${fr24_sharing_key}
      #         # FR24KEY_UAT: ${fr24_uat_sharing_key}
      #         # UATHOST: adsb-dump978
      #         # UATPORT: "30978"
      #       resources:
      #         requests:
      #           cpu: 10m
      #           memory: 64Mi
      #         limits:
      #           memory: 256Mi

    persistence:
      usb:
        type: hostPath
        hostPath: /dev/bus/usb
      diskstats:
        type: hostPath
        hostPath: /proc/diskstats
        advancedMounts:
          ultrafeeder:
            ultrafeeder:
              - path: /proc/diskstats
                readOnly: true
      ultrafeeder:
        existingClaim: adsb-ultrafeeder-data-local-path
        advancedMounts:
          ultrafeeder:
            ultrafeeder:
              - path: /var/globe_history
                subPath: globe_history
              - path: /var/lib/collectd
                subPath: collectd
              - path: /usr/local/share/osm_tiles_offline
                subPath: offline_maps
    service:
      ultrafeeder:
        controller: ultrafeeder
        type: NodePort
        ports:
          http:
            port: 80
            nodePort: 31677
          beast:
            port: 30005
          uat:
            port: 30978
      # dump978:
      #   controller: dump978
      #   type: ClusterIP
      #   ports:
      #     uat:
      #       port: 30978
      # flightradar24:
      #   controller: flightradar24
      #   type: NodePort
      #   ports:
      #     http:
      #       port: 8754

    ingress:
      ultrafeeder:
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: web
        hosts:
          - host: "adsb.internal"
            paths:
              # - path: /fr24
              #   pathType: Prefix
              #   service:
              #     identifier: flightradar24
              #     port: 8754
              - path: /
                pathType: Prefix
                service:
                  identifier: ultrafeeder
                  port: 80
