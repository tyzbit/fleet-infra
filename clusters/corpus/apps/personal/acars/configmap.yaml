apiVersion: v1
kind: ConfigMap
metadata:
  name: acars-scripts
  namespace: personal
data:
  nooelec-sdr.rules:
    SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", MODE="0666", SYMLINK+="nooelec_sdr_%s{serial}"
  acars-usb-watchdog.sh: |
    #!bin/bash
    function log() {
      echo "[$(date "+%F %T")][usb-watchdog] $1"
    }

    function unbind() {
      echo -n $1 > /sys/bus/pci/drivers/xhci_hcd/unbind
    }

    function bind() {
      echo -n $1 > /sys/bus/pci/drivers/xhci_hcd/bind
    }
    log "Setting up udev rules for serial numbers: $SERIALS"

    # Turn this into iterable
    SERIALS=$(echo $SERIALS | sed 's/,/\n/g')

    fullreset=0
    log "Starting... there will be no further output if everything is working"
    log "Reloading udev rules and then sleeping for 10 seconds..."
    while :; do
      rm -rf /dev/nooelec_sdr_*
      udevadm control --reload-rules && udevadm trigger
      sleep 10
      for SERIAL in $SERIALS; do
        fixed=0
        if [[ ! -e /dev/nooelec_sdr_$SERIAL ]]; then
          log "$SERIAL: Device not found"
          rm -rf /dev/nooelec_sdr_$SERIAL
          info=$(timeout 2 usb-devices | grep -B5 $SERIAL | grep -Eo "Bus=[0-9\s]+|Dev#=[0-9 ]+" | cut -d= -f2 | tr -d ' ')
          bus=$(echo $info||awk '{print $1}')
          device=$(echo $info||awk '{print $2}')
          if [[ ${bus}x == "x" ]] || [[ ${device}x == "x" ]] || [[ $fullreset == 1 ]]; then
            log "$SERIAL: Couldn't get bus or device"
            timeout 2 usb-devices | grep -B4 -A6 "Nooelec"
            controller=$(ls /sys/bus/pci/drivers/xhci_hcd | grep -E '[0-9a-f]{4}:[0-9a-f]{2}:[0-9a-f]{2}\.[0-9]')
            if [[ "$${controller}x" == "x" ]]; then
              log "$SERIAL: Couldn't determine controller, here's /sys/bus/pci/drivers/xhci_hcd"
              ls /sys/bus/pci/drivers/xhci_hcd
              log "Sleeping for 30 seconds"
              sleep 30
              continue
            else
              log "Resetting hub"
              for SERIAL in $SERIALS; do
                touch /tmp/reset/$SERIAL
              done
              log "Waiting 30 seconds for apps to start exiting"
              sleep 30
              log "Unbinding controller $controller"
              unbind $controller
              sleep 1
              log "Binding controller $controller"
              bind $controller
              log "Sleeping for 5 minutes..."
              sleep 300
            fi
          else
            log "$SERIAL: Resetting bus: $bus, device: $device"
            if usbreset "$bus/$device"; then
              log "$SERIAL Device reset, triggering app reset"
              touch /tmp/reset/$SERIAL
              fixed=1
            else
              log "$SERIAL: usbreset failed"
              fullreset=1
            fi
          fi
        fi
        [[ $fixed == 1 ]] && log "$SERIAL: Everything looks good now"
      done
      sleep 20
    done
