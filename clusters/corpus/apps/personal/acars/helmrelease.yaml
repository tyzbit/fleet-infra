# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app acars
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *app
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: "3.7.3"
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    common_settings: &common_settings
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        nodeSelector:
          acars: "true"

    controllers:
      acarsdec: 
        <<: *common_settings
        replicas: 1
        containers:
          acarsdec:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarsdec
              tag: latest-build-412
            env:
              FEED_ID: TYZBIT-ACARS-1
              TZ: Etc/UTC
              SOAPYSDR: driver=rtlsdr,serial=13055074
              FREQUENCIES: "130.025"
              # Enabling all frequencies to determine which are actually used
              # RTL-SDR can only scan 2MHz range
              # See https://app.airframes.io/about
              # FREQUENCIES: >-
              #   130.025;130.425;130.450;130.825;130.850;131.125;131.425;
              #   131.450;131.475;131.525;131.550;131.725;131.825;131.850
              OUTPUT_SERVER: acars-acarsrouter
              OUTPUT_SERVER_PORT: "5550"
              OUTPUT_SERVER_MODE: tcp
            resources:
              requests:
                cpu: 150m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarsdec2:
        <<: *common_settings
        replicas: 1
        containers:
          acarsdec2:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarsdec
              tag: latest-build-412
            env:
              FEED_ID: TYZBIT-ACARS-2
              TZ: Etc/UTC
              SOAPYSDR: driver=rtlsdr,serial=58322450
              FREQUENCIES: 131.725;130.450
              # Enabling all frequencies to determine which are actually used
              # RTL-SDR can only scan 2MHz range
              # See https://app.airframes.io/about
              # FREQUENCIES: >-
              #   130.025;130.425;130.450;130.825;130.850;131.125;131.425;
              #   131.450;131.475;131.525;131.550;131.725;131.825;131.850
              OUTPUT_SERVER: acars-acarsrouter
              OUTPUT_SERVER_PORT: "5550"
              OUTPUT_SERVER_MODE: tcp
            resources:
              requests:
                cpu: 150m
                memory: 128Mi
              limits:
                memory: 256Mi

      dumpvdl2:
        <<: *common_settings
        replicas: 1
        containers:
          dumpvdl2:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-dumpvdl2
              tag: latest-build-348
            env:
              FEED_ID: TYZBIT-VDL2-1
              TZ: Etc/UTC
              SOAPYSDR: driver=rtlsdr,serial=00000001
              FREQUENCIES: 136.975;136.100;136.650
              # FREQUENCIES: "136.100;136.650;136.700;136.800;136.975"
              ZMQ_MODE: server
              ZMQ_ENDPOINT: tcp://0.0.0.0:45555
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarsrouter:
        <<: *common_settings
        replicas: 1
        containers:
          acarsrouter:
            image:
              repository: ghcr.io/sdr-enthusiasts/acars_router
              tag: 1.3.1_linux_amd64
            env:
              TZ: Etc/UTC
              AR_SEND_UDP_ACARS: acars-acarshub:5550;feedthe.acarsdrama.com:5550
              AR_SEND_UDP_VDLM2: acars-acarshub:5555;feedthe.acarsdrama.com:5555
              AR_RECV_ZMQ_VDLM2: acars-dumpvdl2:45555
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarshub:
        <<: *common_settings
        replicas: 1 # active nas
        containers:
          acarshub:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarshub
              tag: v3.8.0Build1379_nohealthcheck
            env:
              TZ: Etc/UTC
              ENABLE_ADSB: "false"
              ENABLE_ACARS: external
              ENABLE_VDLM: external
              QUIET_MESSAGES: "false" # This logs the messages themselves
            probes:
              liveness:
                enabled: true
                port: 15550
              readiness:
                enabled: true
                port: 15550
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 512Mi

      acarsprocessor:
        <<: *common_settings
        replicas: 1 # active nas
        containers:
          acarsprocessor:
            image:
              repository: ghcr.io/tyzbit/acars-processor
              tag: latest
            env:
              ACARSHUB_HOST: acars-acarshub
              ACARSHUB_PORT: "15550"
              ACARSHUB_VDLM2_HOST: acars-acarshub
              ACARSHUB_VDLM2_PORT: "15555"
              TAR1090_URL: &tar1090 http://adsb-ultrafeeder
              ANNOTATE_ACARS: "true"
              ANNOTATE_VDLM2: "true"
              LOGLEVEL: info
              TAR1090_REFERENCE_GEOLOCATION: &location ${my_latitude},${my_longitude}
            envFrom:
              - secretRef:
                  name: acars-processor
            resources:
              requests:
                cpu: 10m
                memory: 256Mi
              limits:
                memory: 256Mi

      acarsprocessor2:
        <<: *common_settings
        replicas: 1 # active nas
        containers:
          acarsprocessor2:
            image:
              repository: ghcr.io/tyzbit/acars-processor
              tag: latest
            env:
              ACARSHUB_HOST: acars-acarshub
              ACARSHUB_PORT: "15550"
              ACARSHUB_VDLM2_HOST: acars-acarshub
              ACARSHUB_VDLM2_PORT: "15555"
              ANNOTATE_ACARS: "true"
              ANNOTATE_VDLM2: "true"
              TAR1090_URL: *tar1090
              LOGLEVEL: debug
              TAR1090_REFERENCE_GEOLOCATION: *location
              FILTER_CRITERIA_HAS_TEXT: "true"
              NEW_RELIC_CUSTOM_EVENT_TYPE: CustomACARSHumanMessages
              # FILTER_CRITERIA_DICTIONARY_PHRASE_LENGTH_MINIMUM: "2"
              FILTER_OPENAI_MODEL: gpt-4o-mini
              FILTER_OPENAI_PROMPT: >-
                Does this have text that looks like a message from one human to another?
              # FILTER_OPENAI_APIKEY: (set in envFrom)
              ACARS_ANNOTATOR_SELECTED_FIELDS: >-
                acarsAircraftTailCode
                acarsFrequencyMHz
                acarsMessageText
                acarsMessageFrom
              VDLM2_ANNOTATOR_SELECTED_FIELDS: >-
                vdlm2FrequencyHz
                acarsAircraftTailCode
                acarsMessageText
                acarsMessageFrom
              TAR1090_ANNOTATOR_SELECTED_FIELDS: >-
                tar1090AircraftDistanceMi
                tar1090AircraftAltimeterGeometricFeet
            envFrom:
              - secretRef:
                  name: acars-processor2
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 128Mi

      acarsprocessor3:
        <<: *common_settings
        replicas: 1 # active nas
        containers:
          acarsprocessor3:
            image:
              repository: ghcr.io/tyzbit/acars-processor
              tag: latest
            env:
              ACARSHUB_HOST: acars-acarshub
              ACARSHUB_PORT: "15550"
              ACARSHUB_VDLM2_HOST: acars-acarshub
              ACARSHUB_VDLM2_PORT: "15555"
              ANNOTATE_ACARS: "true"
              ANNOTATE_VDLM2: "true"
              LOGLEVEL: debug
              FILTER_CRITERIA_HAS_TEXT: "true"
              # FILTER_CRITERIA_DICTIONARY_PHRASE_LENGTH_MINIMUM: "2"
              FILTER_OLLAMA_URL: http://ollama:11434
              FILTER_OLLAMA_MODEL: gemma3
              FILTER_OLLAMA_PROMPT: >-
                Does this have text that looks like communication between
                one human to another at the end of the message?
              ACARS_ANNOTATOR_SELECTED_FIELDS: >-
                acarsMessageText
              VDLM2_ANNOTATOR_SELECTED_FIELDS: >-
                acarsMessageText
            envFrom:
              - secretRef:
                  name: acars-processor3
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 128Mi

    persistence:
      usb:
        type: hostPath
        hostPath: /dev/bus/usb
        advancedMounts:
          acarsdec:
            acarsdec:
              - path: /dev/bus/usb
          acarsdec2:
            acarsdec2:
              - path: /dev/bus/usb
          dumpvdl2:
            dumpvld2:
              - path: /dev/bus/usb
      acarshub:
        existingClaim: acars-data-longhorn-webapp
        advancedMounts:
          acarshub:
            acarshub:
              - path: /run/acars

    service:
      acarsrouter:
        controller: acarsrouter
        type: ClusterIP
        ports:
          acars:
            port: 5550
          vdlm2:
            port: 15555
      dumpvdl2:
        controller: dumpvdl2
        type: ClusterIP
        ports:
          vdlm2:
            port: 5555
          vdlm2-zmq:
            port: 45555
      acarshub:
        controller: acarshub
        type: ClusterIP
        ports:
          http:
            port: 80
          acarsinput:
            port: 5550
            protocol: UDP
          vdslinput:
            port: 5555
            protocol: UDP
          acarsoutput:
            port: 15550
          vdsloutput:
            port: 15555

    ingress:
      acarshub:
        className: nginx
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://acars-oauth2-proxy.personal.svc.cluster.local/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
          cert-manager.io/cluster-issuer: letsencrypt
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/target: ${cloudflared_tunnel_uuid}.cfargotunnel.com
        hosts:
          - host: &host "acars.${personal_domain}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: acarshub
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host

      oauth:
        className: nginx
        annotations:
          external-dns.alpha.kubernetes.io/exclude: "true"
        labels:
          use-cloudflare-dns-solver: "true"
        hosts:
          - host: *host
            paths:
              - path: "/oauth2"
                service:
                  name: acars-oauth2-proxy
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name acars-oauth2-proxy
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *name
  chart:
    spec:
      chart: oauth2-proxy
      version: "7.12.8"
      sourceRef:
        kind: HelmRepository
        name: oauth2-proxy
        namespace: flux-system
  interval: 2m0s
  values:
    replicaCount: 1
    extraArgs:
      provider: github
      github-org: "${blog_name}"
      github-team: "super-admins,acars"
      cookie-expire: 168h0m0s
    config:
      existingSecret: acars-oauth2-proxy
