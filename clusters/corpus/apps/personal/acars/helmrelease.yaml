# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app acars
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *app
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: "3.7.3"
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    common_settings: &common_settings
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        nodeSelector:
          acars: "true"
    udev: &udev
      securityContext: {privileged: true}
      image: {repository: ghcr.io/tyzbit/containers/debian-udev,tag: latest}
      command:
        - bash
        - -c
        - |
          cat <<EOF > /etc/udev/rules.d/20-nooelec-$(SERIAL)-sdr.rules
          SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", ATTRS{serial}=="$(SERIAL)", SYMLINK+="nooelec_sdr_$(SERIAL)"
          EOF
          udevadm control --reload-rules && udevadm trigger

    controllers:
      acarsdec: 
        <<: *common_settings
        replicas: 1
        initContainers: {udev: {<<: *udev, env: {SERIAL: "13055074"}}}
        containers:
          acarsdec:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarsdec
              tag: latest-build-412
            env:
              FEED_ID: TYZBIT-ACARS-1
              TZ: Etc/UTC
              SOAPYSDR: serial=13055074,driver=rtlsdr
              FREQUENCIES: "130.025"
              # Enabling all frequencies to determine which are actually used
              # RTL-SDR can only scan 2MHz range
              # See https://app.airframes.io/about
              # FREQUENCIES: >-
              #   130.025;130.425;130.450;130.825;130.850;131.125;131.425;
              #   131.450;131.475;131.525;131.550;131.725;131.825;131.850
              OUTPUT_SERVER: acars-acarsrouter
              OUTPUT_SERVER_PORT: "5550"
              OUTPUT_SERVER_MODE: tcp
            resources:
              requests:
                cpu: 150m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarsdec2:
        <<: *common_settings
        replicas: 1
        initContainers: {udev: {<<: *udev, env: {SERIAL: "58322450"}}}
        containers:
          acarsdec2:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarsdec
              tag: latest-build-412
            env:
              FEED_ID: TYZBIT-ACARS-2
              TZ: Etc/UTC
              SOAPYSDR: serial=58322450,driver=rtlsdr
              FREQUENCIES: 131.725;130.450
              # Enabling all frequencies to determine which are actually used
              # RTL-SDR can only scan 2MHz range
              # See https://app.airframes.io/about
              # FREQUENCIES: >-
              #   130.025;130.425;130.450;130.825;130.850;131.125;131.425;
              #   131.450;131.475;131.525;131.550;131.725;131.825;131.850
              OUTPUT_SERVER: acars-acarsrouter
              OUTPUT_SERVER_PORT: "5550"
              OUTPUT_SERVER_MODE: tcp
            resources:
              requests:
                cpu: 150m
                memory: 128Mi
              limits:
                memory: 256Mi

      dumpvdl2:
        <<: *common_settings
        replicas: 1
        initContainers: {udev: {<<: *udev, env: {SERIAL: "00000001"}}}
        containers:
          dumpvdl2:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-dumpvdl2
              tag: latest-build-348
            env:
              FEED_ID: TYZBIT-VDL2-1
              TZ: Etc/UTC
              SOAPYSDR: serial=00000001,driver=rtlsdr
              FREQUENCIES: 136.975;136.100;136.650
              # FREQUENCIES: "136.100;136.650;136.700;136.800;136.975"
              ZMQ_MODE: server
              ZMQ_ENDPOINT: tcp://0.0.0.0:45555
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarsrouter:
        <<: *common_settings
        replicas: 1
        containers:
          acarsrouter:
            image:
              repository: ghcr.io/sdr-enthusiasts/acars_router
              tag: 1.3.1_linux_amd64
            env:
              TZ: Etc/UTC
              AR_SEND_UDP_ACARS: acars-acarshub:5550;feedthe.acarsdrama.com:5550
              AR_SEND_UDP_VDLM2: acars-acarshub:5555;feedthe.acarsdrama.com:5555
              AR_RECV_ZMQ_VDLM2: acars-dumpvdl2:45555
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarshub:
        <<: *common_settings
        replicas: 1 # active nas
        containers:
          acarshub:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarshub
              tag: v3.8.0Build1379_nohealthcheck
            env:
              TZ: Etc/UTC
              ENABLE_ADSB: "true"
              ADSB_URL: http://adsb-ultrafeeder/data/aircraft.json
              ADSB_LAT: ${my_latitude}
              ADSB_LON: ${my_longitude}
              ENABLE_ACARS: external
              ENABLE_VDLM: external
              QUIET_MESSAGES: "false" # This logs the messages themselves
            probes:
              liveness:
                enabled: true
                port: 15550
              readiness:
                enabled: true
                port: 15550
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 512Mi

    persistence:
      acarsdec:
        type: hostPath
        hostPath: &acarsdecusb /dev/nooelec_sdr_13055074
        advancedMounts: {acarsdec: {acarsdec: [path: *acarsdecusb, readOnly: true]}}
      acarsdec2:
        type: hostPath
        hostPath: &acarsdec2usb /dev/nooelec_sdr_58322450
        advancedMounts: {acarsdec2: {acarsdec2: [path: *acarsdec2usb, readOnly: true]}}
      dumpvdl2:
        type: hostPath
        hostPath: &dumpvdl2usb /dev/nooelec_sdr_00000001
        advancedMounts: {dumpvdl2: {dumpvdl2: [path: *dumpvdl2usb, readOnly: true]}}
      dev:
        type: hostPath
        hostPath: /dev
        advancedMounts:
          acarsdec: {udev: [&rudev {path: /dev}]}
          acarsdec2: {udev: [*rudev]}
          dumpvdl2: {udev: [*rudev]}
      runudev:
        type: hostPath
        hostPath: /dev
        advancedMounts:
          acarsdec: {udev: [&rudev {path: /run/udev}]}
          acarsdec2: {udev: [*rudev]}
          dumpvdl2: {udev: [*rudev]}
      sys:
        type: hostPath
        hostPath: /sys
        advancedMounts:
          acarsdec: {udev: [&sys {path: /sys}]}
          acarsdec2: {udev: [*sys]}
          dumpvdl2: {udev: [*sys]}

      # usb:
      #   type: hostPath
      #   hostPath: &usbpath /dev/bus/usb/
      #   advancedMounts:
      #     acarsdec: {acarsdec: [path: *usbpath,readOnly: true]}
      #     acarsdec2: {acarsdec2: [path: *usbpath,readOnly: true]}
      #     dumpvdl2: {dumpvdl2: [path: *usbpath,readOnly: true]}

      shm:
        type: hostPath
        hostPath: /dev/shm
      acarshub:
        existingClaim: acars-data-longhorn-webapp
        advancedMounts: {acarshub: {acarshub: [path: /run/acars]}}

    service:
      acarsrouter:
        controller: acarsrouter
        type: ClusterIP
        ports:
          acars:
            port: 5550
          vdlm2:
            port: 15555
      dumpvdl2:
        controller: dumpvdl2
        type: ClusterIP
        ports:
          vdlm2:
            port: 5555
          vdlm2-zmq:
            port: 45555
      acarshub:
        controller: acarshub
        type: ClusterIP
        ports:
          http:
            port: 80
          acarsinput:
            port: 5550
            protocol: UDP
          vdslinput:
            port: 5555
            protocol: UDP
          acarsoutput:
            port: 15550
          vdsloutput:
            port: 15555

    ingress:
      acarshub:
        className: nginx
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://acars-oauth2-proxy.personal.svc.cluster.local/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
          cert-manager.io/cluster-issuer: letsencrypt
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/target: ${cloudflared_tunnel_uuid}.cfargotunnel.com
        hosts:
          - host: &host "acars.${personal_domain}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: acarshub
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host

      oauth:
        className: nginx
        annotations:
          external-dns.alpha.kubernetes.io/exclude: "true"
        labels:
          use-cloudflare-dns-solver: "true"
        hosts:
          - host: *host
            paths:
              - path: "/oauth2"
                service:
                  name: acars-oauth2-proxy
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name acars-oauth2-proxy
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *name
  chart:
    spec:
      chart: oauth2-proxy
      version: "7.12.12"
      sourceRef:
        kind: HelmRepository
        name: oauth2-proxy
        namespace: flux-system
  interval: 2m0s
  values:
    replicaCount: 1
    extraArgs:
      provider: github
      github-org: "${blog_name}"
      github-team: "super-admins,acars"
      cookie-expire: 168h0m0s
    config:
      existingSecret: acars-oauth2-proxy
