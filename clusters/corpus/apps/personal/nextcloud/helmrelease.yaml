# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.4.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app nextcloud
  namespace: flux-system
spec:
  releaseName: *app
  targetNamespace: personal
  timeout: 15m
  interval: 2m0s
  chart:
    spec:
      chart: app-template
      version: "3.5.1"
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllers:
      db:
        replicas: 1 # active longhorn
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          nodeSelector:
            longhorn: primary

        containers:
          &db nextcloud-db:
            image:
              repository: mariadb:10.8
              tag: "10.8"
              pullPolicy: Always
            envFrom:
              - secretRef:
                  name: nextcloud-db
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 1Gi

      app:
        replicas: 1
        type: deployment
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          &app nextcloud-app:
            image:
              repository: nextcloud
              tag: &nextcloudver "30.0.1"
              pullPolicy: Always
            securityContext:
              privileged: true
            envFrom:
              - secretRef:
                  name: nextcloud-config
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 12Gi

          &cache nextcloud-cache: &cachecontainer
            image:
              repository: redis
              tag: "7.4"
              pullPolicy: Always
            command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
            resources:
              requests:
                cpu: 1000m
              limits:
                memory: 32Mi

      worker:
        replicas: 1
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          &worker nextcloud-worker:
            image:
              repository: nextcloud
              tag: *nextcloudver
              pullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
              - |
                ops=(
                "db:add-missing-primary-keys"
                "db:add-missing-indices"
                "db:add-missing-columns"
                "files:cleanup"
                )
                for op in "$${ops[@]}" ; do
                  echo "Running php occ $op"
                  su www-data -s /usr/local/bin/php occ db:$op;
                  echo "Finished php occ $op"
                done &&
                su www-data -s /usr/local/bin/php occ background-job:worker
            resources:
              requests:
                cpu: 1000m
              limits:
                memory: 1Gi

          cache: *cachecontainer

    persistence:
      # MariaDB
      db:
        existingClaim: nextcloud-mariadb-longhorn-database
        advancedMounts:
          db:
            *db :
              - path: /var/lib/mysql
      db-config:
        name: nextcloud-db-config
        type: configMap
        advancedMounts:
          db:
            *db :
              - path: /etc/mysql/conf.d
                readOnly: true

      # Nextcloud
      data:
        existingClaim: nextcloud-data-nas
        advancedMounts:
          app:
            *app :
              - path: &datamount /var/www/html
            worker:
              - path: *datamount
      cache:
        type: emptyDir
        medium: Memory
        sizeLimit: 128Mi
        advancedMounts:
          app:
            *cache :
              - path: /data
      socket:
        type: emptyDir
        medium: Memory
        sizeLimit: 128Mi
        advancedMounts:
          app:
            *cache :
              - path: /data
            *app :
              - path: &varredis /var/run/redis/
            *worker :
              - path: *varredis

    service:
      main:
        controller: app
        type: ClusterIP
        ports:
          http:
            primary: true
            port: 80

      db:
        controller: db
        type: ClusterIP
        ports:
          mariadb:
            primary: true
            port: 3306

    ingress:
      app:
        className: nginx
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 2048m
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "20"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "14400"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "14400"
          cert-manager.io/cluster-issuer: letsencrypt
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/target: ${cloudflared_tunnel_uuid}.cfargotunnel.com
        hosts:
          - host: &host "cloud.${personal_domain}"
            paths:
              - path: "/"
                service:
                  identifier: main
        tls:
          - hosts:
              - *host
            secretName: *host
