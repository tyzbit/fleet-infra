# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.1/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app adsb
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *app
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: "4.1.2"
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllercommon: &common_settings
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
        fr24-radar-id: ${fr24_radar_id}
      pod: {nodeSelector: {adsb: "true"}}
      replicas: 1 # active longhorn-webapp

    controllers:
      adsb-usb-watchdog:
        <<: *common_settings
        forceRename: adsb-usb-watchdog
        serviceAccount:
          name: adsb-usb-watchdog
        replicas: 1
        containers:
          adsb-usb-watchdog:
            securityContext: {privileged: true}
            image: {repository: debian,tag: latest}
            command: [bash,"/tmp/adsb-usb-watchdog.sh"]
            # env: {SERIALS: "30275839,98941503"}
            env:
              SERIALS: "98941503" # Naked SDR
              STATEFULSETS: >-
                adsb-flightradar24,
                adsb-ultrafeeder
#                adsb-dump978,

      ultrafeeder:
        <<: *common_settings
        replicas: 1
        containers:
          ultrafeeder:
            securityContext: {privileged: true}
            envFrom: [secretRef: {name: adsb-ultrafeeder}]
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-adsb-ultrafeeder
              tag: latest-build-722
              # tag: telegraf # for use with InfluxDB/Prometheus and Grafana
            command:
              - bash
              - -c
              - |
                set -eo pipefail
                files=("osm_tiles_0_9.tar.gz" "osm_tiles_10.tar.gz")
                IPATH=/usr/local/share/osm_tiles_offline
                mkdir -p "$IPATH"
                cd "$IPATH"

                for file in "$${files[@]}"; do
                  echo "downloading $file if needed"
                  curl -L --no-progress-meter \
                    --etag-save "$file.etag" \
                    --etag-compare "$file.etag" \
                    "https://github.com/wiedehopf/adsb-scripts/releases/download/osm2022/$file" \
                    -o "$file" || echo "couldn't check for new maps, check internet"
                  if [ -f $file ]; then
                    echo "updating maps from $file"
                    tar -x -f "$file"
                    # With the etag saved, we don't need the original archive
                    echo "cleaning up $file"
                    rm -f $file
                  fi
                done
                echo "updated offline maps"
                /tar1090-install.sh || true # we just need it to set up maps
                /init
            env:
              # https://github.com/sdr-enthusiasts/docker-adsb-ultrafeeder?tab=readme-ov-file#basic-ultrafeeder-parameters
              LOGLEVEL: verbose
              TZ: US/New_York
              # UUID: "568"
              READSB_DEVICE_TYPE: rtlsdr
              ENABLE_978: "yes"
              URL_978: http://adsb-dump978/skyaware978
              # READSB_RTLSDR_DEVICE: 00000001 # Serial number of device
              # DEVICE: "30275839"
              # DEVICE: "stx:1090:0" # Nano SDR
              DEVICE: "98941503" #Naked SDR
              # readsb/decoder parameters: (these are in the secret)
              READSB_LAT: ${my_latitude}
              READSB_LON: ${my_longitude}
              READSB_ALT: 3m
              READSB_RX_LOCATION_ACCURACY: 2 
              READSB_STATS_RANGE: "true"
              READSB_NET_BEAST_OUTPUT_PORT: "30005"
              READSB_JSON_TRACE_INTERVAL: "5"
              READSB_HEATMAP_INTERVAL: "5" # configs replay too, should be in lock-step with trace interval
              # TAR1090 (Map Web Page) parameters:
              UPDATE_TAR1090: "true"
              TAR1090_DEFAULTCENTERLAT: "${my_latitude}"
              TAR1090_DEFAULTCENTERLON: "${my_longitude}"
              TAR1090_MESSAGERATEINTITLE: "true"
              TAR1090_PLANECOUNTINTITLE: "true"
              TAR1090_ENABLE_AC_DB: "true"
              TAR1090_FLIGHTAWARELINKS: "true"
              HEYWHATSTHAT_ALTS: 5280,35000
              TAR1090_SITESHOW: "true"
              TAR1090_RANGE_OUTLINE_COLORED_BY_ALTITUDE: "true"
              TAR1090_RANGE_OUTLINE_WIDTH: "2.0"
              TAR1090_RANGERINGSDISTANCES: 50,100,150,200
              TAR1090_RANGERINGSCOLORS: "'#FFFFFF','#AAAAAA','#222222','#000000'"
              TAR1090_USEROUTEAPI: "true"
              # GRAPHS1090 (Decoder and System Status Web Page) parameters:
              GRAPHS1090_DISABLE: "true"
              GRAPHS1090_DARKMODE: "true"
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  initialDelaySeconds: 60
                  periodSeconds: 30
                  failureThreshold: 3
                  exec: {command: [bash,-c,rtl_test 2>&1 | grep -q $(DEVICE)]}
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 512Mi

      dump978:
        <<: *common_settings
        replicas: 0
        containers:
          dump978:
            securityContext: {privileged: true}
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-dump978
              tag: latest-build-744
            env:
              TZ: US/New_York
              LAT: ${my_latitude}
              LON: ${my_longitude}
              DUMP978_DEVICE_TYPE: rtlsdr
              DUMP978_RTLSDR_DEVICE: "98941503"
              # DUMP978_RTLSDR_DEVICE: "30275839" # Original Nooelect SDR
              # DUMP978_RTLSDR_DEVICE: "stx:1090:0" # Nooelec Nano SDR
              DUMP978_SDR_GAIN: autogain
              DUMP978_SDR_PPM: "0"
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                memory: 256Mi

      flightradar24:
        <<: *common_settings
        replicas: 1
        containers:
          # https://github.com/sdr-enthusiasts/docker-flightradar24?tab=readme-ov-file#obtaining-a-flightradar24-sharing-key-for-adsb
          flightradar24:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-flightradar24
              tag: latest
            env:
              BEASTHOST: adsb-ultrafeeder
              FR24KEY: ${fr24_sharing_key}
              FR24KEY_UAT: ${fr24_uat_sharing_key}
              # UATHOST: adsb-dump978
              # UATPORT: "30978"
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                memory: 256Mi

    persistence:
      # For kubectl, usbreset and usb-devices
      binaries:
        type: hostPath
        hostPath: /bin
        advancedMounts:
          adsb-usb-watchdog: {adsb-usb-watchdog: [{path: /usr/local/sbin}]}
      # For resetting individual USB devices
      usbdevices:
        type: hostPath
        hostPath: /dev/bus/usb
        advancedMounts:
          adsb-usb-watchdog: {adsb-usb-watchdog: [{path: /dev/bus/usb}]}
      # For resetting the USB Hub
      usbhub:
        type: hostPath
        hostPath: /sys/bus/pci/drivers/xhci_hcd
        advancedMounts:
          adsb-usb-watchdog: {adsb-usb-watchdog: [{path: /sys/bus/pci/drivers/xhci_hcd}]}
      script:
        type: configMap
        name: adsb-scripts
        advancedMounts:
          adsb-usb-watchdog: {adsb-usb-watchdog: [
            {path: /tmp/adsb-usb-watchdog.sh,subPath: adsb-usb-watchdog.sh}
            ]
          }
      ultrafeeder:
        existingClaim: adsb-ultrafeeder-data-longhorn-webapp
        advancedMounts:
          ultrafeeder:
            ultrafeeder:
              - path: /var/globe_history
                subPath: globe_history
              - path: /var/lib/collectd
                subPath: collectd
              - path: /usr/local/share/osm_tiles_offline
                subPath: offline_maps

    service:
      ultrafeeder:
        controller: ultrafeeder
        type: ClusterIP
        ports:
          http:
            port: 80
          beast:
            port: 30005
          uat:
            port: 30978
      dump978:
        controller: dump978
        type: ClusterIP
        ports:
          http: {port: 80}
          uat: {port: 30978}
          json: {port: 30979}
      flightradar24:
        controller: flightradar24
        type: ClusterIP
        ports:
          http:
            port: 8754

    ingress:
      ultrafeeder:
        className: nginx
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://adsb-ultrafeeder-oauth2-proxy.personal.svc.cluster.local/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
          cert-manager.io/cluster-issuer: letsencrypt
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/target: ${cloudflared_tunnel_uuid}.cfargotunnel.com
          hajimari.io/enable: "true"
          hajimari.io/icon: radar
          hajimari.io/info: "Aircraft Map"
          hajimari.io/targetBlank: "true"
        hosts:
          - host: &host "adsb.${personal_domain}"
            paths:
              - path: /fr24
                pathType: Prefix
                service:
                  identifier: flightradar24
                  port: 8754
              - path: /
                pathType: Prefix
                service:
                  identifier: ultrafeeder
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host

      oauth:
        className: nginx
        annotations:
          external-dns.alpha.kubernetes.io/exclude: "true"
        labels:
          use-cloudflare-dns-solver: "true"
        hosts:
          - host: *host
            paths:
              - path: "/oauth2"
                service:
                  name: adsb-ultrafeeder-oauth2-proxy
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name adsb-ultrafeeder-oauth2-proxy
  namespace: flux-system
spec:
  targetNamespace: personal
  releaseName: *name
  chart:
    spec:
      chart: oauth2-proxy
      version: "7.14.1"
      sourceRef:
        kind: HelmRepository
        name: oauth2-proxy
        namespace: flux-system
  interval: 2m0s
  values:
    replicaCount: 1
    extraArgs:
      provider: github
      github-org: "${blog_name}"
      github-team: "super-admins,adsb-ultrafeeder"
      cookie-expire: 168h0m0s
    config:
      existingSecret: adsb-ultrafeeder-oauth2-proxy
