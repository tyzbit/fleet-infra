# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app revolt-dev
  namespace: flux-system
spec:
  releaseName: *app
  targetNamespace: personal
  timeout: 15m
  interval: 2m0s
  chart:
    spec:
      chart: app-template
      version: "3.7.3"
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    # -- Used for anchor references further down, has no effect here
    reusable:
      l: &longhorncontroller
        type: statefulset
        annotations: {reloader.stakater.com/auto: "true"}
        pod: {nodeSelector: {longhorn: primary}}
      d: &deploymentcontroller
        type: deployment
        annotations: {reloader.stakater.com/auto: "true"}
      c: &configmount
        path: /Revolt.toml
        readOnly: true
        subPath: Revolt.toml
    # -- END

    controllers:
      "mongo":
        <<: *longhorncontroller
        replicas: 1 # active longhorn
        containers:
          revolt-mongo:
            image:
              repository: docker.io/mongo
              tag: 8.0.9
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 512Mi}}
      "redis":
        <<: *longhorncontroller
        replicas: 1 # active longhorn
        containers:
          revolt-redis:
            image:
              repository: docker.io/eqalpha/keydb
              tag: alpine_x86_64_v6.3.4
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 128Mi}}
      "rabbit":
        <<: *longhorncontroller
        replicas: 1 # active longhorn
        containers:
          revolt-rabbit:
            image:
              repository: docker.io/rabbitmq
              tag: 4
              pullPolicy: Always
            env: &env
              # Kinda just got lazy here
              RABBITMQ_DEFAULT_USER: rabbitmq
              RABBITMQ_DEFAULT_PASS: ${revolt_dev_rabbitmq_password}
              MINIO_ROOT_USER: minioautumn
              MINIO_ROOT_PASSWORD: ${revolt_dev_minio_password}
              RUST_LOG: debug
            resources: {requests: {cpu: 10m},limits: {memory: 256Mi}}
      "minio":
        <<: *longhorncontroller
        replicas: 1 # active longhorn
        containers:
          revolt-minio:
            command:
              - /bin/sh
              - -c
              - |
                while ! /usr/bin/mc ready minio; do
                  /usr/bin/mc config host add minio http://127.0.0.1:9000 minioautumn $(MINIO_ROOT_PASSWORD)
                  echo 'Waiting minio...'
                  sleep 1
                done && \
                /usr/bin/mc mb minio/revolt-uploads &
                minio server /data
            image:
              repository: docker.io/minio/minio
              tag: latest
              pullPolicy: Always
            env:
              <<: *env
            resources: {requests: {cpu: 10m},limits: {memory: 1Gi}}
      "api":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-api:
            image:
              repository: ghcr.io/revoltchat/server
              tag: 20250513-2
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 256Mi}}
      "events":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-events:
            image:
              repository: ghcr.io/revoltchat/bonfire
              tag: 20250513-2
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 128Mi}}
      "web":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          edgevpn:
            securityContext: {privileged: true}
            image: {repository: quay.io/mudler/edgevpn,tag: v0.30.2}
            command: [sh,-c,"modprobe tun;edgevpn --dns 127.0.0.1:53 --address 10.0.0.1/24"]
            env: {EDGEVPNCONFIG: /config.yaml}
          revolt-web:
            command:
              - /bin/sh
              - -c
              - |
                cd /usr/src/app
                filepath=dist/assets/RevoltApp*.js
                echo "Doing find and replace for compiled constants"
                echo "Change these in the command for the web container"
                echo 
                echo "NOTE: this is only for the frontend, backend config"
                echo "      still needs to be set and in sync too."
                echo
                for setting in \
                  icons=5_000_000 \
                  emojis=500_000 \
                  banners=12_000_000 \
                  avatars=8_000_000 \
                  backgrounds=12_000_000 \
                ; do
                  type=$(echo $setting|cut -d= -f1)
                  setting=$(echo $setting|cut -d= -f2)
                  echo "Setting all $type to $setting"
                  sed -i.bak -E "s/(\{[^\}]+fileType:\"$type\"[^\}]+maxFileSize):[a-z0-6]+/\1:$setting/g" $filepath
                done
                echo "Done with find and replace, starting yarn..."
                yarn start:inject
            image:
              repository: ghcr.io/revoltchat/client
              tag: master
              pullPolicy: Always
            env:
              REVOLT_PUBLIC_URL: https://test.${chat_domain}/api
            resources: {requests: {cpu: 10m},limits: {memory: 256Mi}}
      "autumn":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-autumn:
            image:
              repository: ghcr.io/revoltchat/autumn
              tag: 20250513-2
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 512Mi}}
            env:
              <<: *env
      "january":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-january:
            image:
              repository: ghcr.io/revoltchat/january
              tag: 20250513-1
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 128Mi}}
      "crond":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-crond:
            image:
              repository: ghcr.io/revoltchat/crond
              tag: 20250210-1-debug
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 128Mi}}
      "pushd":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-pushd:
            image:
              repository: ghcr.io/revoltchat/pushd
              tag: 20250513-2
              pullPolicy: Always
            resources: {requests: {cpu: 10m},limits: {memory: 128Mi}}
      "vortex":
        <<: *deploymentcontroller
        replicas: 1
        containers:
          revolt-vortex:
            image:
              repository: ghcr.io/revoltchat/vortex
              tag: 0.3.0-alpha.1
              pullPolicy: Always
            env:
              MANAGE_TOKEN: ${revolt_dev_vortex_manage_token}
              WS_URL: wss://test.${chat_domain}/vortex-ws
              RTC_MIN_PORT: 12321
              RTC_MAX_PORT: 12340
              RTC_IPS: 0.0.0.0,${home_ip}
              DISABLE_RTP: 0
            resources: {requests: {cpu: 10m},limits: {memory: 128Mi}}

    persistence:
      "mongo":
        existingClaim: revolt-dev-mongo-longhorn-database
        advancedMounts: {mongo: {revolt-mongo: [path: /data/db] } }
      "rabbit":
        existingClaim: revolt-dev-rabbit-longhorn-database
        advancedMounts: {rabbit: {revolt-rabbitmq: [path: /var/lib/rabbitmq]}}
      "minio":
        existingClaim: revolt-dev-minio-nas
        advancedMounts: {minio: {revolt-minio: [path: /data]}}
      "redis":
        existingClaim: revolt-dev-redis-nas
        advancedMounts: {redis: {revolt-redis: [path: /data]}}
      "config":
        name: revolt-dev
        type: configMap
        advancedMounts:
          api: {revolt-api: [*configmount]}
          events: {revolt-events: [*configmount]}
          autumn: {revolt-autumn: [*configmount]}
          january: {revolt-january: [*configmount]}
          crond: {revolt-crond: [*configmount]}
          pushd: {revolt-pushd: [*configmount]}
      edgevpn-config:
        name: revolt-dev-edgevpn-config
        type: secret
        advancedMounts: {web: {edgevpn: [
          {path: /config.yaml,readOnly: true, subPath: config.yaml}
          ]}}
      edgevpn-modules:
        type: hostPath
        hostPath: /lib/modules
        advancedMounts: {web: {edgevpn: [{path: /lib/modules}]}}

    service:
      "mongo":
        controller: mongo
        type: ClusterIP
        ports: {mongo: {port: 27017}}
      "redis":
        controller: redis
        type: ClusterIP
        ports: {redis: {port: 6379}}
      "rabbit":
        controller: rabbit
        type: ClusterIP
        ports: {rabbit: {port: 5672}}
      "minio":
        controller: minio
        type: ClusterIP
        ports: {minio: {port: 9000}}
      "web":
        controller: web
        type: ClusterIP
        ports: {http: {port: 5000}}
      "api":
        controller: api
        type: ClusterIP
        ports: {http: {port: 14702}}
      "events":
        controller: events
        type: ClusterIP
        ports: {http: {port: 14703}}
      "autumn":
        controller: autumn
        type: ClusterIP
        ports: {http: {port: 14704}}
      "january":
        controller: january
        type: ClusterIP
        ports: {http: {port: 14705}}
      "vortex":
        controller: vortex
        type: ClusterIP
        ports:
          http: {port: 8080}
          rtc-1: {port: 12301}
          rtc-2: {port: 12302}
          rtc-3: {port: 12303}
          rtc-4: {port: 12304}
          rtc-5: {port: 12305}
          rtc-6: {port: 12306}
          rtc-7: {port: 12307}
          rtc-8: {port: 12308}
          rtc-9: {port: 12309}
          rtc-10: {port: 12310}
          rtc-11: {port: 12311}
          rtc-12: {port: 12312}
          rtc-13: {port: 12313}
          rtc-14: {port: 12314}
          rtc-15: {port: 12315}
          rtc-16: {port: 12316}
          rtc-17: {port: 12317}
          rtc-18: {port: 12318}
          rtc-19: {port: 12319}
          rtc-20: {port: 12320}

    # -- This is complex because it replaces Caddy
    ingress:
      "revolt":
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt
          nginx.ingress.kubernetes.io/proxy-body-size: 250m
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "2592000" # 1 week
          nginx.ingress.kubernetes.io/proxy-send-timeout: "2592000"
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/rewrite-target: /$2
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          external-dns.alpha.kubernetes.io/target: ${cloudflared_tunnel_uuid}.cfargotunnel.com
        hosts:
          - host: &host test.${chat_domain}
            paths:
              - path: "/api(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: api

              - path: "/ws(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: events

              - &autumn
                path: "/autumn(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: autumn
              - {<<: *autumn, path: "/(/)?(attachments.*)"}
              - {<<: *autumn, path: "/(/)?(avatars.*)"}
              - {<<: *autumn, path: "/(/)?(backgrounds.*)"}
              - {<<: *autumn, path: "/(/)?(icons.*)"}
              - {<<: *autumn, path: "/(/)?(banners.*)"}
              - {<<: *autumn, path: "/(/)?(emojis.*)"}

              - path: "/january(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: january

              - path: "/vortex-ws(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: vortex
                  port: http

              - path: "/vortex-http(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: vortex
                  port: http

              - path: "/(/)?(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: web
        tls:
          - hosts:
              - *host
            secretName: *host
